# Soliguide: Useful information for those who need it
#
# SPDX-FileCopyrightText: Â© 2024 Solinum
#
# SPDX-License-Identifier: AGPL-3.0-only
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
name: _Build container image

on:
  workflow_call:
    inputs:
      registry:
        default: ghcr.io
        type: string
      image_name:
        type: string
        required: true
      dockerfile:
        type: string
        required: true
      tag:
        type: string
        required: true
      labels:
        type: string
        required: true
      tag_suffix1:
        type: string
        default: -build
      tag_suffix2:
        type: string
        default: -test
      target1:
        type: string
        default: build
      target2:
        type: string
        default: test
      build_target2:
        type: boolean
        default: true
      build_production:
        type: boolean
        default: false
      build_args:
        type: string
        default: ""
    outputs:
      tags1:
        value: ${{ jobs.build_container.outputs.tags1 }}
      tags2:
        value: ${{ jobs.build_container.outputs.tags2 }}
      tags_production:
        value: ${{ jobs.build_container.outputs.tags_production }}

jobs:
  build_container:
    name: Build container image ${{ inputs.image_name }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      tags1: ${{ env.IMAGE_TAGS1 }}
      tags2: ${{ env.IMAGE_TAGS2 }}
      tags_production: ${{ env.IMAGE_TAGS }}
    env:
      IMAGE_TAGS: ${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.tag }}
      IMAGE_TAGS1: ${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.tag }}${{ inputs.tag_suffix1 }}
      IMAGE_TAGS2: ${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.tag }}${{ inputs.tag_suffix2 }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build ${{ env.IMAGE_TAGS1 }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: true
          target: ${{ inputs.target1 }}
          build-args: ${{ inputs.build_args }}
          tags: ${{ env.IMAGE_TAGS1 }}
          labels: ${{ inputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.IMAGE_TAGS1 }}-cache
            type=registry,ref=${{ inputs.registry }}/${{ inputs.image_name }}:main${{ inputs.tag_suffix1 }}-cache
          cache-to: |
            type=registry,mode=max,ref=${{ env.IMAGE_TAGS1 }}-cache

      - name: Build ${{ env.IMAGE_TAGS2 }}
        if: ${{ inputs.build_target2 }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: true
          target: ${{ inputs.target2 }}
          build-args: ${{ inputs.build_args }}
          tags: ${{ env.IMAGE_TAGS2 }}
          labels: ${{ inputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.IMAGE_TAGS2 }}-cache
            type=registry,ref=${{ inputs.registry }}/${{ inputs.image_name }}:main${{ inputs.tag_suffix2 }}-cache
          cache-to: |
            type=registry,mode=max,ref=${{ env.IMAGE_TAGS2 }}-cache

      - name: Build ${{ env.IMAGE_TAGS }}
        if: ${{ inputs.build_production }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: true
          target: deploy
          build-args: ${{ inputs.build_args }}
          tags: ${{ env.IMAGE_TAGS }}
          labels: ${{ inputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.IMAGE_TAGS2 }}-cache
            type=registry,ref=${{ env.IMAGE_TAGS }}-cache
            type=registry,ref=${{ inputs.registry }}/${{ inputs.image_name }}:main${{ inputs.tag_suffix2 }}-cache
            type=registry,ref=${{ inputs.registry }}/${{ inputs.image_name }}:main-cache
          cache-to: |
            type=registry,mode=max,ref=${{ env.IMAGE_TAGS }}-cache
